<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- mybatis 연동한 DBMS 프로젝트를 위하여 설정할 bean -->
	<!-- dataSource -->
	<!-- oracle jdbc:oracle:thin:@localhost:1501:xe -->
	<bean id="ds" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/myLibs"/>
		<property name="username" value="gbUser"/>
		<property name="password" value="12345"/>
	</bean>
	
	<!-- sqlSessionFactory -->
	<!-- 
	property의 값 지정하기
	value : 값이 문자열형 일때, String
	ref : 값이 객체일때
	 -->
	<!-- 위의 datasource 값이 아래로 주입 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="ds"/>
		<property name="typeAliasesPackage" value="com.callor.gallery.model"/>
		<property name="mapperLocations" value="/WEB-INF/spring/mapper/*-mapper.xml"/>
	</bean>

	<!-- query를 받아서 처리, 우리가 직접 소환하는 것, SessionFactoryBean이라는 클래스를 이용해 Template에 주입(위에 선언한 id를 아래의 ref에 주입), 계속 연결되는 것을 이해하자 -->
	<!-- sqlSessionTemplate -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession" />
	</bean>
	<mybatis-spring:scan base-package="com.callor.gallery.persistance.ext"/>
	
	
	<!-- transaction Manager -->
	<!-- 위의 과정이 이루어질때 중간에 개입 -->
	<tx:annotation-driven/>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="ds"/>
	</bean>
	


</beans>




